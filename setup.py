import subprocess
import sys
import os
from pathlib import Path
import platform

# C·∫§U H√åNH CH√çNH

REQUIRED_PYTHON_VERSION = (3, 6)
BASE_DIR = Path(__file__).parent

FOLDER_STRUCTURE = [
    'data/train/real', 'data/train/fake',
    'data/validation/real', 'data/validation/fake',
    'data/test/real', 'data/test/fake',
    'models', 'results', 'static', 'templates',
    'logs', 'config', 'utils'
]

REQUIREMENTS = {
    'data_processing': [
        'numpy>=1.21.0',
        'pandas>=1.3.0',
        'opencv-python>=4.5.0',
        'pillow>=9.0.0'
    ],
    'machine_learning': [
        'tensorflow>=2.8.0',
        'scikit-learn>=1.0.0',
        'keras>=2.8.0'
    ],
    'visualization': [
        'matplotlib>=3.5.0',
        'seaborn>=0.11.0'
    ],
    'utilities': [
        'tqdm>=4.62.0',
        'python-dotenv>=0.19.0',
        'flask>=2.0.0'
    ]
}


# C√ÅC H√ÄM TI·ªÜN √çCH


def check_python_version():
    """Ki·ªÉm tra phi√™n b·∫£n Python"""
    if sys.version_info < REQUIRED_PYTHON_VERSION:
        sys.exit(f"Y√™u c·∫ßu Python {REQUIRED_PYTHON_VERSION[0]}.{REQUIRED_PYTHON_VERSION[1]} ho·∫∑c cao h∆°n")

def create_folders():
    """T·∫°o c·∫•u tr√∫c th∆∞ m·ª•c"""
    print("\n" + "="*40)
    print("T·∫°o c·∫•u tr√∫c th∆∞ m·ª•c")
    print("="*40)
    
    for folder in FOLDER_STRUCTURE:
        path = BASE_DIR / folder
        try:
            path.mkdir(parents=True, exist_ok=True)
            print(f"‚úì T·∫°o th√†nh c√¥ng: {folder}")
            (path / '.gitkeep').touch(exist_ok=True)  # Th√™m file .gitkeep cho th∆∞ m·ª•c r·ªóng
        except OSError as e:
            print(f"‚úó L·ªói khi t·∫°o {folder}: {str(e)}")

def install_packages():
    """C√†i ƒë·∫∑t c√°c g√≥i Python c·∫ßn thi·∫øt"""
    print("\n" + "="*40)
    print("C√†i ƒë·∫∑t c√°c g√≥i Python")
    print("="*40)
    
    # C·∫≠p nh·∫≠t pip tr∆∞·ªõc
    try:
        subprocess.check_call([sys.executable, '-m', 'pip', 'install', '--upgrade', 'pip'])
    except subprocess.CalledProcessError:
        print("‚ö† C·∫£nh b√°o: Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t pip")

    # C√†i ƒë·∫∑t t·∫•t c·∫£ requirements
    all_packages = [pkg for category in REQUIREMENTS.values() for pkg in category]
    
    for package in all_packages:
        try:
            print(f"\n‚ñ∂ ƒêang c√†i ƒë·∫∑t {package}...")
            subprocess.check_call([sys.executable, '-m', 'pip', 'install', package])
            print(f"‚úì Th√†nh c√¥ng: {package}")
        except subprocess.CalledProcessError:
            print(f"‚úó Th·∫•t b·∫°i: Kh√¥ng th·ªÉ c√†i ƒë·∫∑t {package}")

def generate_requirements():
    """T·∫°o file requirements.txt"""
    print("\n" + "="*40)
    print("T·∫°o file requirements.txt")
    print("="*40)
    
    with open(BASE_DIR / 'requirements.txt', 'w') as f:
        for category, packages in REQUIREMENTS.items():
            f.write(f"\n# {category.upper()}\n")
            f.write('\n'.join(packages))
    
    print("‚úì ƒê√£ t·∫°o file requirements.txt")

# ================================================
# MAIN SCRIPT
# ================================================

def setup_environment():
    """H√†m ch√≠nh thi·∫øt l·∫≠p m√¥i tr∆∞·ªùng"""
    print("üõ† Thi·∫øt l·∫≠p m√¥i tr∆∞·ªùng cho d·ª± √°n ph√°t hi·ªán h√†ng gi·∫£")
    
    check_python_version()
    create_folders()
    install_packages()
    generate_requirements()
    
    print("\n‚úÖ Thi·∫øt l·∫≠p ho√†n t·∫•t!")

if __name__ == "__main__":
    setup_environment()